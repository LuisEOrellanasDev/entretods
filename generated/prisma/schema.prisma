// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  firebaseUid String   @unique
  firstName   String
  lastName    String
  phone       String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userTravels           UserTravel[]
  paidExpenses          Expense[]            @relation("ExpensePayer")
  expenseParticipations ExpenseParticipant[]
}

model Travel {
  id          String   @id @default(cuid())
  title       String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userTravels UserTravel[]
  expenses    Expense[]
}

model UserTravel {
  id          String    @id @default(cuid())
  userId      String
  travelId    String
  role        String
  joinedAt    DateTime  @default(now())
  leftAt      DateTime?
  exitBalance Decimal?  @db.Decimal(10, 2)

  user   User   @relation(fields: [userId], references: [id])
  travel Travel @relation(fields: [travelId], references: [id])

  @@unique([userId, travelId])
}

model Expense {
  id          String   @id @default(cuid())
  travelId    String
  payerId     String
  title       String
  description String?
  amount      Decimal  @db.Decimal(10, 2)
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  travel       Travel               @relation(fields: [travelId], references: [id])
  payer        User                 @relation("ExpensePayer", fields: [payerId], references: [id])
  participants ExpenseParticipant[]
}

model ExpenseParticipant {
  id        String  @id @default(cuid())
  expenseId String
  userId    String
  share     Decimal @db.Decimal(10, 2)

  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([expenseId, userId])
}
